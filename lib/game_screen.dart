import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:just_audio/just_audio.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';
import 'dart:math';
import 'game_board.dart';
import 'score_box.dart';
import 'list_equality.dart';
import 'fruit_guide.dart';
import 'fireworks_effect.dart';
import 'ad_manager.dart';
import 'banner_ad_widget.dart';
import 'game_state.dart';
import 'package:provider/provider.dart';
import 'game_state_provider.dart';
import 'settings_screen.dart';
import 'localization_helper.dart';

class Fruits2048Screen extends StatefulWidget {
  const Fruits2048Screen({super.key});

  @override
  State<Fruits2048Screen> createState() => _Fruits2048ScreenState();
}

class _Fruits2048ScreenState extends State<Fruits2048Screen> {
  static const int gridSize = 4;
  late SharedPreferences prefs;
  
  // Audio player cho nh·∫°c n·ªÅn
  final AudioPlayer _audioPlayer = AudioPlayer();
  bool _isMusicPlaying = false;
  
  // Audio player cho nh·∫°c chi·∫øn th·∫Øng
  final AudioPlayer _winAudioPlayer = AudioPlayer();
  
  // Audio player cho nh·∫°c merge
  final AudioPlayer _mergeAudioPlayer = AudioPlayer();
  
  // Qu·∫£ng c√°o xen k·∫Ω ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi AdManager
  
  @override
  void initState() {
    super.initState();
    // ƒê·∫£m b·∫£o Provider ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc khi load game
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _loadGame();
    });
    _initBackgroundMusic();
    AdManager.loadInterstitialAd();
    AdManager.loadRewardedAd();
  }

  @override
  void dispose() {
    _audioPlayer.dispose();
    _winAudioPlayer.dispose();
    _mergeAudioPlayer.dispose();
    AdManager.dispose();
    super.dispose();
  }

  Future<void> _loadGame() async {
    prefs = await SharedPreferences.getInstance();
  }

  void _performUndo() {
    final gameState = context.read<GameStateProvider>();
    gameState.performUndo();
  }

  void _handleMove(bool moved) {
    if (moved) {
      final gameState = context.read<GameStateProvider>();
      if (gameState.justMergedSet.isNotEmpty) {
        _playMergeSound();
      }
      // Ki·ªÉm tra game over v√† game won
      _checkGameState();
      
      // Ki·ªÉm tra v√† hi·ªÉn th·ªã dialog t∆∞∆°ng ·ª©ng
      if (gameState.gameOver) {
        _showGameOverDialog();
      } else if (gameState.gameWon && !gameState.showFireworks) {
        _showWinDialog();
      }
    }
  }

  void _checkGameState() {
    final gameState = context.read<GameStateProvider>();
    gameState.updateGameState();
  }



  void _showWinDialog() {
    _stopBackgroundMusic(); // D·ª´ng nh·∫°c n·ªÅn khi th·∫Øng
    _playWinSound(); // Ph√°t nh·∫°c chi·∫øn th·∫Øng
    context.read<GameStateProvider>().showFireworks = true; // Hi·ªÉn th·ªã ph√°o hoa
    
    // T·ª± ƒë·ªông t·∫Øt ph√°o hoa sau 3 gi√¢y
    Future.delayed(const Duration(seconds: 3), () {
      if (mounted) {
        context.read<GameStateProvider>().showFireworks = false;
      }
    });
  }

  void _showGameOverDialog() {
    
    final gameState = context.read<GameStateProvider>();
    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: Text(LocalizationHelper.getLocalizedString(context, 'gameOver')),
        content: Text(LocalizationHelper.gameOverMessage(context, gameState.score)),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              context.read<GameStateProvider>().resetGame();
            },
            child: Text(LocalizationHelper.getLocalizedString(context, 'playAgain')),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final gameState = context.watch<GameStateProvider>();
    return Scaffold(
      backgroundColor: Colors.transparent, // ƒê·ªÉ gradient hi·ªÉn th·ªã
      appBar: AppBar(
        title: Text(LocalizationHelper.getLocalizedString(context, 'appTitle')),
        backgroundColor: const Color(0xFF4CAF50),
        foregroundColor: Colors.white,
        actions: [
          IconButton(
            onPressed: _toggleBackgroundMusic,
            icon: Icon(_isMusicPlaying ? Icons.music_note : Icons.music_off),
          ),
          IconButton(
            onPressed: () {
              gameState.resetGame();
            },
            icon: const Icon(Icons.refresh),
          ),
          IconButton(
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => SettingsScreen()),
              );
            },
            icon: const Icon(Icons.settings),
          ),
        ],
      ),
      body: Stack(
        children: [
          // L·ªõp d∆∞·ªõi: Gradient + pattern emoji tr√°i c√¢y m·ªù
          Container(
            decoration: const BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  Color(0xFFB2FF59), // Xanh l√° s√°ng
                  Color(0xFF4CAF50), // Xanh l√° ƒë·∫≠m
                  Color(0xFF81D4FA), // Xanh d∆∞∆°ng nh·∫°t
                ],
              ),
            ),
            child: Stack(
              children: [
                // C√°c emoji tr√°i c√¢y m·ªù, v·ªã tr√≠ c·ªë ƒë·ªãnh ƒë·∫πp m·∫Øt
                Positioned(
                  top: 60, left: 30,
                  child: Opacity(
                    opacity: 0.12,
                    child: Text('üçâ', style: TextStyle(fontSize: 80),),
                  ),
                ),
                Positioned(
                  top: 200, right: 40,
                  child: Opacity(
                    opacity: 0.10,
                    child: Text('üçç', style: TextStyle(fontSize: 60),),
                  ),
                ),
                Positioned(
                  bottom: 100, left: 60,
                  child: Opacity(
                    opacity: 0.10,
                    child: Text('üçí', style: TextStyle(fontSize: 50),),
                  ),
                ),
                Positioned(
                  bottom: 40, right: 80,
                  child: Opacity(
                    opacity: 0.09,
                    child: Text('üçá', style: TextStyle(fontSize: 70),),
                  ),
                ),
                Positioned(
                  top: 120, left: 120,
                  child: Opacity(
                    opacity: 0.10,
                    child: Text('üçì', style: TextStyle(fontSize: 60),),
                  ),
                ),
                Positioned(
                  bottom: 180, right: 30,
                  child: Opacity(
                    opacity: 0.09,
                    child: Text('ü•≠', style: TextStyle(fontSize: 60),),
                  ),
                ),
                Positioned(
                  top: 40, right: 100,
                  child: Opacity(
                    opacity: 0.10,
                    child: Text('üçà', style: TextStyle(fontSize: 60),),
                  ),
                ),
              ],
            ),
          ),
          // L·ªõp tr√™n: N·ªôi dung game nh∆∞ c≈©
          Column(
            children: [
              Expanded(
                child: Stack(
                  children: [
                    GestureDetector(
                      behavior: HitTestBehavior.opaque,
                      onHorizontalDragEnd: (details) {
                        if (gameState.gameOver || gameState.isMoving) return;
                        double velocity = details.velocity.pixelsPerSecond.dx;
                        if (velocity.abs() > 300) {
                          if (velocity > 0) {
                            _handleMove(gameState.moveRight());
                          } else {
                            _handleMove(gameState.moveLeft());
                          }
                        }
                      },
                      onVerticalDragEnd: (details) {
                        if (gameState.gameOver || gameState.isMoving) return;
                        double velocity = details.velocity.pixelsPerSecond.dy;
                        if (velocity.abs() > 300) {
                          if (velocity > 0) {
                            _handleMove(gameState.moveDown());
                          } else {
                            _handleMove(gameState.moveUp());
                          }
                        }
                      },
                      child: Column(
                        children: [
                          const SizedBox(height: 16),
                          Column(
                            children: [
                              Row(
                                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                children: [
                                  ScoreBox(LocalizationHelper.getLocalizedString(context, 'score'), gameState.score),
                                  ScoreBox(LocalizationHelper.getLocalizedString(context, 'bestScore'), gameState.bestScore),
                                  // Nh√≥m tr·ª£ gi√∫p (undo/qu·∫£ng c√°o + x√≥a cherry)
                                  Row(
                                    mainAxisSize: MainAxisSize.min,
                                    children: [
                                      IconButton(
                                        onPressed: (gameState.freeUndoCount > 0 || gameState.paidUndoCount > 0)
                                            ? (gameState.gameHistory.isNotEmpty ? _performUndo : null)
                                            : (gameState.gameHistory.isNotEmpty ? _showBuyUndoDialog : null),
                                        icon: Icon(
                                          (gameState.freeUndoCount > 0 || gameState.paidUndoCount > 0)
                                              ? Icons.undo
                                              : Icons.play_circle_outline,
                                          color: _helpIconColor(gameState.freeUndoCount > 0 || gameState.paidUndoCount > 0),
                                        ),
                                        tooltip: (gameState.freeUndoCount > 0 || gameState.paidUndoCount > 0)
                                            ? LocalizationHelper.undoHelpTooltip(context, gameState.freeUndoCount + gameState.paidUndoCount)
                                            : LocalizationHelper.getLocalizedString(context, 'watchAdForHelp'),
                                        splashColor: (gameState.freeUndoCount > 0 || gameState.paidUndoCount > 0)
                                            ? null
                                            : Colors.orangeAccent,
                                        highlightColor: (gameState.freeUndoCount > 0 || gameState.paidUndoCount > 0)
                                            ? null
                                            : Colors.orange.withOpacity(0.2),
                                      ),
                                      IconButton(
                                        onPressed: () {
                                          final provider = context.read<GameStateProvider>();
                                          if (provider.cherryHelpCount > 0) {
                                            provider.useCherryHelp();
                                          } else {
                                            _showBuyCherryHelpDialog();
                                          }
                                        },
                                        icon: Icon(
                                          Icons.delete_sweep,
                                          color: _cherryHelpIconColor(context.read<GameStateProvider>().cherryHelpCount > 0),
                                        ),
                                        tooltip: LocalizationHelper.getLocalizedString(context, 'removeCherryHelpTooltip'),
                                        splashColor: context.read<GameStateProvider>().cherryHelpCount > 0
                                            ? null
                                            : Colors.orangeAccent,
                                        highlightColor: context.read<GameStateProvider>().cherryHelpCount > 0
                                            ? null
                                            : Colors.orange.withOpacity(0.2),
                                      ),
                                    ],
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const SizedBox(height: 16),
                          Expanded(
                            child: Center(
                              child: GameBoard(
                                tiles: gameState.tiles,
                                getTileColor: _getTileColor,
                              ),
                            ),
                          ),
                          const FruitGuide(),
                          Padding(
                            padding: const EdgeInsets.only(left: 12, right: 12, top: 8, bottom: 16),
                            child: Text(LocalizationHelper.getLocalizedString(context, 'swipeToMerge'),
                                style: const TextStyle(color: Color(0xFF2E7D32))),
                          ),
                        ],
                      ),
                    ),
                    // Hi·ªáu ·ª©ng ph√°o hoa
                    if (gameState.showFireworks)
                      FireworksEffect(
                        onComplete: () {
                          context.read<GameStateProvider>().showFireworks = false;
                        },
                      ),
                  ],
                ),
              ),
              // Qu·∫£ng c√°o bi·ªÉu ng·ªØ ·ªü d∆∞·ªõi c√πng
              const BannerAdWidget(),
            ],
          ),
        ],
      ),
    );
  }

  Color _getTileColor(int value) {
    switch (value) {
      case 2: // üçí Cherry
        return const Color(0xFFD32F2F); // ƒê·ªè cherry
      case 4: // üçì D√¢u t√¢y
        return const Color(0xFFE91E63); // H·ªìng d√¢u
      case 8: // üçá Nho
        return const Color(0xFF7B1FA2); // T√≠m nho
      case 16: // üçä Qu√Ωt
        return const Color(0xFFFFA726); // Cam qu√Ωt
      case 32: // üçé T√°o
        return const Color(0xFFEF5350); // ƒê·ªè t√°o
      case 64: // üçê L√™
        return const Color(0xFFCDDC39); // V√†ng xanh l√™
      case 128: // üçë ƒê√†o
        return const Color(0xFFFFB74D); // Cam ƒë√†o
      case 256: // ü•≠ Xo√†i
        return const Color(0xFFFFD600); // V√†ng xo√†i
      case 512: // üçç D·ª©a
        return const Color(0xFFFFF176); // V√†ng d·ª©a
      case 1024: // üçâ D∆∞a h·∫•u
        return const Color(0xFF388E3C); // Xanh d∆∞a h·∫•u
      case 2048: // üçà D∆∞a gang
        return const Color(0xFF81C784); // Xanh d∆∞a gang
      case 4096: // ü•• D·ª´a
        return const Color(0xFF8D6E63); // N√¢u d·ª´a
      case 8192: // üß∫ Gi·ªè th·∫ßn k·ª≥
        return const Color(0xFF7C4DFF); // T√≠m gi·ªè th·∫ßn k·ª≥
      default:
        return const Color(0xFFC8E6C9); // M√†u xanh l√° c√¢y nh·∫°t cho √¥ tr·ªëng
    }
  }

  Color _helpIconColor(bool hasHelp) {
    return hasHelp ? Colors.white : Colors.orange;
  }

  Color _cherryHelpIconColor(bool hasCherry) {
    return hasCherry ? Colors.white : Colors.orange;
  }

  Future<void> _initBackgroundMusic() async {
    prefs = await SharedPreferences.getInstance();
    bool? isMusicOn = prefs.getBool('isMusicOn');
    _isMusicPlaying = isMusicOn ?? true; // M·∫∑c ƒë·ªãnh l√† b·∫≠t nh·∫°c n·∫øu ch∆∞a c√≥ d·ªØ li·ªáu

    await _audioPlayer.setAsset('assets/sounds/theme.mp3');
    await _audioPlayer.setLoopMode(LoopMode.all);
    await _audioPlayer.setVolume(0.3);

    if (_isMusicPlaying) {
      await _audioPlayer.play();
    }
    setState(() {}); // C·∫≠p nh·∫≠t UI
  }

  Future<void> _playBackgroundMusic() async {
    try {
      await _audioPlayer.play();
      setState(() {
        _isMusicPlaying = true;
      });
    } catch (e) {
      // Error handling
    }
  }

  Future<void> _stopBackgroundMusic() async {
    try {
      await _audioPlayer.stop();
      setState(() {
        _isMusicPlaying = false;
      });
    } catch (e) {
      // Error handling
    }
  }

  Future<void> _toggleBackgroundMusic() async {
    _isMusicPlaying = !_isMusicPlaying;
    await prefs.setBool('isMusicOn', _isMusicPlaying);
    setState(() {});
    if (_isMusicPlaying) {
      await _playBackgroundMusic();
    } else {
      await _stopBackgroundMusic();
    }
  }

  Future<void> _playWinSound() async {
    try {
      await _winAudioPlayer.setAsset('assets/sounds/win.mp3');
      await _winAudioPlayer.setVolume(0.7);
      await _winAudioPlayer.play();
    } catch (e) {
      // Error handling
    }
  }

  Future<void> _playMergeSound() async {
    if (!_isMusicPlaying) return;
    try {
      await _mergeAudioPlayer.setAsset('assets/sounds/merge.wav');
      await _mergeAudioPlayer.setVolume(0.7);
      await _mergeAudioPlayer.play();
    } catch (e) {
      // Error handling
    }
  }

  // Hi·ªÉn th·ªã dialog mua th√™m l∆∞·ª£t tr·ª£ gi√∫p
  void _showBuyUndoDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(LocalizationHelper.getLocalizedString(context, 'addHelpMove')),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(LocalizationHelper.getLocalizedString(context, 'addHelpMoveMessage')),
            const SizedBox(height: 8),
            Text(LocalizationHelper.getLocalizedString(context, 'freeMoveUsed')),
            Text(LocalizationHelper.getLocalizedString(context, 'watchAdForMove')),
            const SizedBox(height: 8),
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: const Color(0xFFFFF3E0),
                borderRadius: BorderRadius.circular(4),
                border: Border.all(color: const Color(0xFFFF9800)),
              ),
              child: Row(
                children: [
                  const Icon(Icons.info_outline, color: Color(0xFFFF9800), size: 16),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      LocalizationHelper.getLocalizedString(context, 'adInfo'),
                      style: const TextStyle(fontSize: 12, color: Color(0xFFFF9800)),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(LocalizationHelper.getLocalizedString(context, 'cancel')),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _watchAdForUndo();
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFF4CAF50),
              foregroundColor: Colors.white,
            ),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                const Icon(Icons.play_circle_outline, size: 16),
                const SizedBox(width: 4),
                Text(LocalizationHelper.getLocalizedString(context, 'watchAd')),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // Xem qu·∫£ng c√°o ƒë·ªÉ nh·∫≠n l∆∞·ª£t tr·ª£ gi√∫p
  void _watchAdForUndo() {
    AdManager.showRewardedAd(() {
      context.read<GameStateProvider>().addPaidUndo();
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(LocalizationHelper.getLocalizedString(context, 'helpMoveAdded')),
          backgroundColor: Color(0xFF4CAF50),
          duration: Duration(seconds: 2),
        ),
      );
    });
  }

  // Hi·ªÉn th·ªã dialog mua th√™m l∆∞·ª£t x√≥a cherry (gi·ªëng undo)
  void _showBuyCherryHelpDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(LocalizationHelper.getLocalizedString(context, 'addCherryHelp')),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(LocalizationHelper.getLocalizedString(context, 'addCherryHelpMessage')),
            const SizedBox(height: 8),
            Text(LocalizationHelper.getLocalizedString(context, 'watchAdForCherry')),
            const SizedBox(height: 8),
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: const Color(0xFFFFF3E0),
                borderRadius: BorderRadius.circular(4),
                border: Border.all(color: const Color(0xFFFF9800)),
              ),
              child: Row(
                children: [
                  const Icon(Icons.info_outline, color: Color(0xFFFF9800), size: 16),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      LocalizationHelper.getLocalizedString(context, 'adInfo'),
                      style: const TextStyle(fontSize: 12, color: Color(0xFFFF9800)),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(LocalizationHelper.getLocalizedString(context, 'cancel')),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _watchAdForCherryHelp();
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFF4CAF50),
              foregroundColor: Colors.white,
            ),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                const Icon(Icons.play_circle_outline, size: 16),
                const SizedBox(width: 4),
                Text(LocalizationHelper.getLocalizedString(context, 'watchAd')),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // Xem qu·∫£ng c√°o ƒë·ªÉ nh·∫≠n l∆∞·ª£t x√≥a cherry
  void _watchAdForCherryHelp() {
    AdManager.showRewardedAd(() {
      context.read<GameStateProvider>().addCherryHelp();
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(LocalizationHelper.getLocalizedString(context, 'cherryHelpAdded')),
          backgroundColor: Color(0xFF4CAF50),
          duration: Duration(seconds: 2),
        ),
      );
    });
  }
} 